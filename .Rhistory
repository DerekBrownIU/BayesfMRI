a <- matrix(rnorm(10), 5, 2)
tmp <- list(a=a, b=a)
sapply(tmp, class)
sapply(tmp, dim)
library(roxygen2)
roxygenize()
any(sapply(tmp, class) != 'matrix')
sapply(template_mean, dim)[1,]
sapply(tmp, dim)[1,]
dim(a)
V=5
L=2
nvox=5
paste0('Each element of template_mean must be an LxV (L=',L,', V=',nvox,') matrix')
cat(paste0('Length of timeseries: T = ',ntime,'\n'))
ntime=4
cat(paste0('Length of timeseries: T = ',ntime,'\n'))
cat(paste0('Number of voxels/vertices: V = ',nvox,'\n'))
cat(paste0('Number of ICs: L = ',ntime,'\n'))
#check that the number of data locations (nvox), time points (ntime) and ICs (L) makes sense
if(ntime > nvox) warning('More time points than voxels. Are you sure?')
if(L > nvox) stop('The arguments you supplied suggest that you want to estimate more ICs than you have data locations.  Please check the orientation and size of template_mean, template_var and BOLD.')
if(L > ntime) stop('The arguments you supplied suggest that you want to estimate more ICs than you have time points.  Please check the orientation and size of template_mean, template_var and BOLD.')
setwd('~/Dropbox/RESEARCH/DiagnosticICA/simulation')
Nx <- 46
Ny <- 55
N <- Nx*Ny #number of voxels
mask <- matrix(1,nrow=Nx,ncol=Ny)
Q <- 3
load(file='template_orig.RData') #template_mean_orig, template_var_orig
dim(template_mean_orig)
q=1
template_mean_q_mat <- mask
template_mean_q_mat[mask==1] <- template_mean_orig[,q]
image(template_mean_q_mat)
c((Nx-shift+1):Nx,1:(Nx-shift))
shift=5
c((Nx-shift+1):Nx,1:(Nx-shift))
length(c((Nx-shift+1):Nx,1:(Nx-shift)))
dim(template_mean_q)
template_mean_q <- mask
dim(template_mean_q)
template_mean_q <- mask
template_mean_q[mask==1] <- template_mean_orig[,q]
template_mean_q_grp2 <- template_mean_q[c((Nx-shift+1):Nx,1:(Nx-shift)),c((Ny-shift+1):Ny,1:(Ny-shift))]
template_mean_q_grp2
image(template_mean_q_grp2)
shift <- 3 #shift in location (pixels)
template_mean_q_grp2 <- template_mean_q[c((Nx-shift+1):Nx,1:(Nx-shift)),c((Ny-shift+1):Ny,1:(Ny-shift))]
image(template_mean_q_grp2)
library(roxygen2)
roxygenize()
library(devtools)
use_build_ignore('R/BayesGLM_group.R')
roxygenize()
roxygenize()
roxygenize()
roxygenize()
setwd('~/Dropbox/RESEARCH/DiagnosticICA/simulation')
shift <- 1:3 #shift in location (pixels)
shift <- 1:3 #shift in location (pixels)
Nx <- 46
Ny <- 55
N <- Nx*Ny #number of voxels
mask <- matrix(1,nrow=Nx,ncol=Ny)
Q <- 3
load(file='template_orig.RData') #template_mean_orig, template_var_orig
sh=shift[1]
template_mean_group2 <- template_mean_orig*0
for(q in 1:Q){
template_mean_q <- mask
template_mean_q[mask==1] <- template_mean_orig[,q]
template_mean_q_grp2 <- template_mean_q[c((Nx-shift+1):Nx,1:(Nx-shift)),c((Ny-shift+1):Ny,1:(Ny-shift))]
template_mean_group2[,q] <- as.vector(template_mean_q_grp2)
}
warnings()
template_mean_group2 <- template_mean_orig*0
for(q in 1:Q){
template_mean_q <- mask
template_mean_q[mask==1] <- template_mean_orig[,q]
template_mean_q_grp2 <- template_mean_q[c((Nx-sh+1):Nx,1:(Nx-sh)),c((Ny-sh+1):Ny,1:(Ny-sh))]
template_mean_group2[,q] <- as.vector(template_mean_q_grp2)
}
image(template_mean_q)
image(template_mean_q_grp2)
sh=3
template_mean_group2 <- template_mean_orig*0
for(q in 1:Q){
template_mean_q <- mask
template_mean_q[mask==1] <- template_mean_orig[,q]
template_mean_q_grp2 <- template_mean_q[c((Nx-sh+1):Nx,1:(Nx-sh)),c((Ny-sh+1):Ny,1:(Ny-sh))]
template_mean_group2[,q] <- as.vector(template_mean_q_grp2)
}
image(template_mean_q_grp2)
#smoothing kernel
FWHM <- 5
sig = FWHM/(2*sqrt(2*log(2)))
load(file='var_corr.RData')
smooth_dev <- function(dev, sigma, var_correction=1){
require(spatstat) #blur
dev_img <- as.im(matrix(dev,nrow=Nx,ncol=Ny)) #reshape to matrix form
dev_img_sm <- blur(dev_img, sigma=sigma) #smooth with Gaussian kernel
dev_img_sm$v <- dev_img_sm$v*var_correction #match variance of unsmoothed image
result <- as.vector(dev_img_sm$v)
return(result)
}
template_mean <- list(group1 = template_mean_orig,
group2 = template_mean_group2)
template_var <- list(group1 = 0.5*abs(template_mean_orig),
group2 = 0.5*abs(template_mean_group2))
# GROUP 1
n <- 100 + 50 #100 training subjects (use to estimate template) + 50 test subjects
subjICs_group1 <- array(NA, dim=c(n, N, Q))
subjICs_group2 <- array(NA, dim=c(n, N, Q))
subjICs <- array(NA, dim=c(n, N, Q))
subjICs <- list(group1 = subjICs, group2 = subjICs)
rm(subjICs_group1)
rm(subjICs_group2)
# GROUP 1
n <- 100 + 50 #100 training subjects (use to estimate template) + 50 test subjects
subjICs <- array(NA, dim=c(n, N, Q))
subjICs <- list(group1 = subjICs, group2 = subjICs)
g=1
ii=1
q=1
dev_iq <- rnorm(N, rep(0,N), sqrt(template_var[[g]][,q])) #generate deviations (subject effects)
dev_iq_sm <- smooth_dev(dev=dev_iq, sigma=sig, var_correction==var_corr[q])
dev_iq_sm <- smooth_dev(dev=dev_iq, sigma=sig, var_correction=var_corr[q])
subjIC_iq <- template_mean[[g]][,q] + dev_iq_sm
subjICs[[g]][ii,,q] <- scale(subjIC_iq, scale=FALSE) #center each IC map
my.image.scale(subjICs[[g]][ii,,q], mask, max=8, min=-2, cols=rainbow(10))
source('sim_funs.R')
my.image.scale(subjICs[[g]][ii,,q], mask, max=8, min=-2, cols=rainbow(10))
my.image.scale(subjICs[[g]][ii,,q], mask, max=8, min=-4, cols=c('turquoise','blue','red','yellow'))
my.image.scale(subjICs[[g]][ii,,q], mask, max=8, min=-4, cols=c('turquoise','darkblue','red','yellow'))
my.image.scale(dev_iq, mask, max=-4, min=-4, cols=c('turquoise','darkblue','yellow'))
summary(dev_iq)
my.image.scale(dev_iq, mask, max=4, min=-4, cols=c('turquoise','darkblue','yellow'))
my.image.scale(dev_iq_sm, mask, max=4, min=-4, cols=c('turquoise','darkblue','red'))
# GROUP 1
n <- 100 + 50 #100 training subjects (use to estimate template) + 50 test subjects
subjICs <- array(NA, dim=c(n, N, Q))
subjICs <- list(group1 = subjICs, group2 = subjICs)
for(g in 1:2){
for(ii in 1:n){
print(ii)
for(q in 1:Q){
dev_iq <- rnorm(N, rep(0,N), sqrt(template_var[[g]][,q])) #generate deviations (subject effects)
dev_iq_sm <- smooth_dev(dev=dev_iq, sigma=sig, var_correction=var_corr[q])
subjIC_iq <- template_mean[[g]][,q] + dev_iq_sm
subjICs[[g]][ii,,q] <- scale(subjIC_iq, scale=FALSE) #center each IC map
#my.image.scale(subjICs[[g]][ii,,q], mask, max=8, min=-4, cols=c('turquoise','darkblue','red','yellow'))
}
}
}
save(subjICs, file = 'subjICs.RData')
load(file = 'subjICs.RData') #subjICs_train
# GROUP 1
n_train <- 100 #100 training subjects (use to estimate template)
n_test <- 50 #50 test subjects
n <- n_train + n_test
subjICs <- array(NA, dim=c(n, N, Q))
subjICs <- list(group1 = subjICs, group2 = subjICs)
for(g in 1:2){
for(ii in 1:n){
print(ii)
for(q in 1:Q){
dev_iq <- rnorm(N, rep(0,N), sqrt(template_var[[g]][,q])) #generate deviations (subject effects)
dev_iq_sm <- smooth_dev(dev=dev_iq, sigma=sig, var_correction=var_corr[q])
subjIC_iq <- template_mean[[g]][,q] + dev_iq_sm
subjICs[[g]][ii,,q] <- scale(subjIC_iq, scale=FALSE) #center each IC map
#my.image.scale(subjICs[[g]][ii,,q], mask, max=8, min=-4, cols=c('turquoise','darkblue','red','yellow'))
}
}
}
save(subjICs, file = 'subjICs.RData')
# RE-ESTIMATE TEMPLATES (MEAN AND VARIANCE)
template_mean2 <- template_mean
template_var2 <- template_var
# RE-ESTIMATE TEMPLATES (MEAN AND VARIANCE)
template_mean2 <- template_mean
template_var2 <- template_var
g=1
template_mean2[[g]] <- apply(subjICs[[g]][1:n_train,], c(2,3), mean)
template_mean2[[g]] <- apply(subjICs[[g]][1:n_train,,], c(2,3), mean)
template_var2[[g]] <- apply(subjICs[[g]][1:n_train,,], c(2,3), var)
for(g in 1:2){
template_mean2[[g]] <- apply(subjICs[[g]][1:n_train,,], c(2,3), mean)
template_var2[[g]] <- apply(subjICs[[g]][1:n_train,,], c(2,3), var)
}
my.image.scale(template_mean2[[g]][,q], mask, max=8, min=-4, cols=c('turquoise','darkblue','red','yellow'))
my.image.scale(template_mean[[g]][,q], mask, max=8, min=0, cols=c('darkblue','red','yellow'))
my.image.scale(template_mean2[[g]][,q], mask, max=8, min=0, cols=c('darkblue','red','yellow'))
getwd()
library(roxygen2)
roxygenize()
library(devtools)
install_github('mandymejia/ciftiTools')
roxygenize()
library(ciftiTools)
library(roxygen2)
roxygenize()
library(ciftiTools)
library(devtools)
use_build_ignore('R/diagnosticICA.R')
use_build_ignore('R/EM_diagnosticICA.R')
library(roxygen2)
roxygenize()
library(BayesfMRI)
if(!is.list(template_mean)) stop('template_mean must be a list')
