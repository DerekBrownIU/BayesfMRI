#' @param gifti_left If brainstructure is 'left' or 'surface', a file path to a gifti shape file for the left hemisphere.  (Provide gifti_left OR mesh_left OR vertices_left/faces_left.)
#' @param mesh_left If brainstructure is 'left' or 'surface', an inla.mesh object for the left hemisphere.  (Provide gifti_left OR mesh_left OR vertices_left/faces_left.)
#' @param vertices_left If brainstructure is 'left' or 'surface', the Vx3 matrix of surface vertices for the left hemisphere.  (Provide gifti_left OR mesh_left OR vertices_left/faces_left.)
#' @param faces_left  If brainstructure is 'left' or 'surface', the Wx3 matrix of triangle membership for the left surface vertices. (Provide gifti_left OR mesh_left OR vertices_left/faces_left.)
#' @param gifti_right If brainstructure is 'right' or 'surface', a file path to a gifti shape file for the right hemisphere.  (Provide gifti_right OR mesh_right OR vertices_right/faces_right.)
#' @param mesh_right If brainstructure is 'right' or 'surface', an inla.mesh object for the right hemisphere.  (Provide gifti_right OR mesh_right OR vertices_right/faces_right.)
#' @param vertices_right If brainstructure is 'right' or 'surface', the Vx3 matrix of surface vertices for the right hemisphere.  (Provide gifti_right OR mesh_right OR vertices_right/faces_right.)
#' @param faces_right  If brainstructure is 'right' or 'surface', the Wx3 matrix of triangle membership for the right surface vertices.  (Provide gifti_right OR mesh_right OR vertices_right/faces_right.)
#' @param structural_img If brainstructure is 'subcortical', the file name of the structural MRI image on which to overlay the subcortical values.  The MNI template is used by default.  Set to NULL to use a blank image.
#' @param w The time/column index of the cifti data to plot.
#' @param plane If brainstructure is 'subcortical' and papaya=FALSE, the plane to display.  Default is 'axial'. Other options are 'sagittal' and 'coronal'.
#' @param num.slices If brainstructure is 'subcortical' and papaya=FALSE, the number of slices to display.  Default is 'axial'. Other options are 'sagittal' and 'coronal'.
#' @param use_papaya If brainstructure is 'subcortical', papaya=TRUE will use papayar to allows for interactive visualization.
#'
#' @export
#' @importFrom gifti readGIfTI
#' @importFrom grDevices colorRampPalette
#' @importFrom INLA inla.mesh.create
#' @importFrom INLA plot.inla.mesh
#' @importFrom oro.nifti overlay readNIfTI
#' @importFrom stats quantile
#' @import papayar
#'
cifti_view <- function(cifti, z_min=NULL, z_max=NULL, colors=NULL, brainstructure, gifti_left=NULL, mesh_left=NULL, vertices_left=NULL, faces_left=NULL, gifti_right=NULL, mesh_right=NULL, vertices_right=NULL, faces_right=NULL, structural_img='MNI', w=1, plane='axial', num.slices=12, use_papaya=FALSE){
nColors <- 64
#pal <- viridis_pal()(nColors)
if(is.null(colors)) colors <- c('aquamarine','green','purple','blue','black','darkred','red','orange','yellow')
pal <- colorRampPalette(colors)(nColors)
if(brainstructure %in% c('left','right','surface')){
values_left <- cifti$CORTEX_LEFT[,w]
nvox_left <- length(values_left)
values_right <- cifti$CORTEX_RIGHT[,w]
nvox_right <- length(values_right)
if(brainstructure=='surface') values <- c(values_left, values_right)
if(brainstructure=='left') values <- values_left
if(brainstructure=='right') values <- values_right
#assign colors to vertices based on intensity values
if(!is.null(z_min)) values[values < z_min] <- z_min else z_min <- min(values, na.rm=TRUE)
if(!is.null(z_max)) values[values > z_max] <- z_max else z_max <- max(values, na.rm=TRUE)
# breaks <- quantile(values[(values > z_min) & (values < z_max)],
#                    probs = seq(0,1,length.out=nColors), na.rm=TRUE)
breaks <- seq(z_min, z_max, length.out=nColors)
colindex <- as.integer(cut(values,breaks=breaks))
if(brainstructure=='surface') {
colindex_left <- colindex[1:nvox_left]
colindex_right <- colindex[(nvox_left+1):(nvox_left+nvox_right)]
}
#construct and plot mesh object
if(brainstructure %in% c('left','surface')){
#if no mesh provided, use vertices and faces that are provided or get them from gifti file
if(is.null(mesh_left)){
if (!is.null(gifti_left)){
surf_left <- readGIfTI(gifti_left)$data
vertices_left <- surf_left$pointset
faces_left <- surf_left$triangle + 1
}
mesh_left <- inla.mesh.create(loc=vertices_left, tv=faces_left)
}
}
if(brainstructure %in% c('right','surface')){
#if no mesh provided, use vertices and faces that are provided or get them from gifti file
if(is.null(mesh_right)){
if (!is.null(gifti_right)){
surf_right <- readGIfTI(gifti_right)$data
vertices_right <- surf_right$pointset
faces_right <- surf_right$triangle + 1
}
mesh_right <- inla.mesh.create(loc=vertices_right, tv=faces_right)
}
}
if(brainstructure=='left') plot.inla.mesh(mesh_left, rgl=TRUE, col=pal[colindex], draw.edges=FALSE)
if(brainstructure=='right') plot.inla.mesh(mesh_right, rgl=TRUE, col=pal[colindex], draw.edges=FALSE)
if(brainstructure=='surface') {
plot.inla.mesh(mesh_left, rgl=TRUE, col=pal[colindex_left])
plot.inla.mesh(mesh_right, rgl=TRUE, col=pal[colindex_left], add=TRUE)
}
}
if(brainstructure=='subcortical'){
#pick slices with a lot of subcortical voxels
if(!use_papaya){
labs <- cifti$LABELS
mask <- (labs > 0)
if(plane=='axial') mask_count <- apply(mask, 3, sum)
if(plane=='coronal') mask_count <- apply(mask, 2, sum)
if(plane=='sagittal') mask_count <- apply(mask, 1, sum)
slices <- which(mask_count > max(mask_count)/2)
inds <- round(seq(1,length(slices), length.out=num.slices))
slices <- slices[inds]
}
if(is.null(structural_img)) {
T1w <- NULL
} else if(structural_img=='T1w') {
T1w <- readNIfTI(system.file('extdata/MNI152_T1_2mm.nii.gz', package='ciftiTools'), reorient=FALSE)
} else {
T1w <- readNIfTI(structural_img, reorient=FALSE)
}
values <- cifti$VOL[,,,w]
if(!is.null(z_min)) values[values < z_min] <- z_min
if(!is.null(z_max)) values[values > z_max] <- z_max
print(paste0('Values to be plotted range from ',min(values[cifti$LABELS > 0]),' to ',max(values[cifti$LABELS > 0])))
img_overlay <- T1w*0
img_overlay@.Data <- values
img_overlay@.Data[cifti$LABELS==0] <- NA
img_labels <- T1w*0
img_labels@.Data <- cifti$LABELS
img_labels@.Data[cifti$LABELS==0] <- NA
if(use_papaya==FALSE) oro.nifti::overlay(x=T1w, y=img_overlay, plot.type='single', plane=plane, z=slices, col.y=pal)
if(use_papaya==TRUE) papaya(list(T1w, img_overlay, img_labels))
}
}
#visualize results in subcortical regions
cifti_view(cifti = result_classical$classicalGLM$single_session, z_min = 0.0001, z_max = 0.01, brainstructure = 'subcortical', w=1, use_papaya = TRUE, structural_img = '~/Box Sync/SOFTWARE/ciftiTools/inst/extdata/MNI152_T1_2mm.nii.gz', num.slices=4)
dim(T1w)
install.packages('marfit')
library(marfit)
library(marfit)
install.packages('marfit')
library(marfit)
install_github('mandymejia/BayesfMRI')
library(devtools)
install_github('mandymejia/BayesfMRI')
library(INLA)
####### Visual function
library(ggplot2)
visualize_vec2img <- function(values, field_names, xy.inds, pal=NULL, gradient2=FALSE, zlim=NULL){
#values is a matrix where each column is a vectorized, masked image
#names are the names of the fields corresponding to each column of values
#xy.in are the col- and row-indices in the original image corresponding to the rows of values
#pal is the color palette to use for the image
#zlim is a vector of the lower and upper limits for the intensity values
values_df <- data.frame(value = as.vector(values),
field = rep(field_names, each=length(values)/length(field_names)),
row = xy.inds[,1],
col = xy.inds[,2])
if(!is.null(zlim)){
print(paste0(sum(values_df$value > zlim[2]), ' pixels above upper z-limit')) #very few values
print(paste0(sum(values_df$value < zlim[1]), ' pixels above upper z-limit')) #very few values
values_df$value[values_df$value > zlim[2]] <- zlim[2]
values_df$value[values_df$value < zlim[1]] <- zlim[1]
}
p <- ggplot(values_df) +
geom_tile(aes(x = 41-row, y = col, color = value, fill = value)) +
facet_grid(. ~ field) + xlab('') + ylab('') +
theme_bw() + theme(panel.grid=element_blank())
if(!is.null(pal)){
p <- p + scale_color_gradientn("", colors=pal, na.value = "black", limits=zlim) +
scale_fill_gradientn("", colors=pal, na.value = "black", limits=zlim)
} else if (gradient2==TRUE) {
p <- p + scale_color_gradient2("", na.value = "black", limits=zlim) +
scale_fill_gradient2("", na.value = "black", limits=zlim)
} else {
p <- p + scale_color_gradient("", na.value = "black", limits=zlim) +
scale_fill_gradient("", na.value = "black", limits=zlim)
}
return(p)
}
mask <- as.matrix(read.table("../simulation/Mask"))
getwd()
setwd('~/Dropbox/RESEARCH/BayesianGLM-Nonstat/simulation_mandy')
mask <- as.matrix(read.table("../simulation/Mask"))
mask2 <- as.matrix(read.table("../simulation/Mask2"))
mask3D <- mask*mask2
# ## Create a mesh using inla.mesh.2d
xy.in <- which(mask3D==1, arr.ind=TRUE)[,2:1]
boundary <- inla.nonconvex.hull(xy.in, resolution = 100)
mesh <- inla.mesh.2d(loc = xy.in, boundary = boundary, max.edge = c(2, 4))
## Create a matrix to translate between original and mesh locations
Amat <- inla.spde.make.A(mesh, loc=xy.in)
## Design matrix
Z <- as.matrix(read.table('50datasets/Z', sep=','))
FWHMs <- c(5,10,20) #size of FWHM used to create task fields (bigger FWHM = larger area activation)
M <- 50 #number of simulation instances
file_list <- list.files('50datasets')
FWHMs
fwhm=5
print(paste0('FWHM: ', fwhm))
m=1
print(paste0('Simulation instance ', m))
## Read in timeseries data
fname_ts <- paste0('FWHM',fwhm,'_NoisyData_',m,'.csv')
dat <- as.matrix(read.csv(file.path('50datasets',fname_ts), header=FALSE))
## Build session data
session <- list(BOLD = dat, design = Z)
is.session(session)
BayesfMRI:::is.session()
BayesfMRI:::is.session(session)
data <- list(single_session = session)
## Run Bayesian GLM
print(system.time(result <- BayesfMRI::BayesGLM_surface(data, mesh = mesh, scale = FALSE, return_INLA_result = FALSE)))
# Check to see that the INLA package is installed
if (!requireNamespace("INLA", quietly = TRUE))
stop("This function requires the INLA package (see www.r-inla.org/download)")
# Check to see if PARDISO is installed
if(!exists("inla.pardiso.check", mode = "function")){
warning("Please update to the latest version of INLA for full functionality and PARDISO compatibility (see www.r-inla.org/download)")
}else{
if(inla.pardiso.check() == "FAILURE: PARDISO IS NOT INSTALLED OR NOT WORKING"){
warning("Consider enabling PARDISO for faster computation (see inla.pardiso())")}
#inla.pardiso()
}
exists("inla.pardiso.check", mode = "function")
inla.pardiso.check()
inla.pardiso.check() == "FAILURE: PARDISO IS NOT INSTALLED OR NOT WORKING"
inla.pardiso.check(verbose=FALSE)
inla.pardiso.check(silent=TRUE)
msg <- inla.pardiso.check()
invisible(inla.pardiso.check())
hush=function(code){
sink("NUL") # use /dev/null in UNIX
tmp = code
sink()
return(tmp)
}
hush(inla.pardiso.check())
hush(tmp <- inla.pardiso.check())
inla.pardiso()
GMRFLib_pardiso_check_install()
INLA:::GMRFLib_pardiso_check_install()
#check that only mesh OR vertices+faces supplied
has_mesh <- !is.null(mesh)
has_verts_faces <- !is.null(vertices) & !is.null(faces)
mesh = mesh
class(mesh)
scale = FALSE
return_INLA_result = FALSE
vertices = NUL
vertices = NULL
faces = NULL
mask = NULL
num.threads=4
outfile = NULL
#check that only mesh OR vertices+faces supplied
has_mesh <- !is.null(mesh)
has_verts_faces <- !is.null(vertices) & !is.null(faces)
has_howmany <- has_mesh + has_verts_faces
if(has_howmany != 1) stop('Must supply EITHER mesh OR vertices and faces.')
#check that all elements of the data list are valid sessions and have the same number of locations and tasks
session_names <- names(data)
n_sess <- length(session_names)
session_names
if(!is.list(data)) stop('I expect data to be a list, but it is not')
data_classes <- sapply(data, 'class')
if(! all.equal(unique(data_classes),'list')) stop('I expect data to be a list of lists (sessions), but it is not')
V <- ncol(data[[1]]$BOLD) #number of data locations
K <- ncol(data[[1]]$design) #number of tasks
for(s in 1:n_sess){
if(! is.session(data[[s]])) stop('I expect each element of data to be a session object, but at least one is not (see `is.session`).')
if(ncol(data[[s]]$BOLD) != V) stop('All sessions must have the same number of data locations, but they do not.')
if(ncol(data[[s]]$design) != K) stop('All sessions must have the same number of tasks (columns of the design matrix), but they do not.')
}
V
K
BayesfMRI:::is.session(data[[1]])
if(ncol(data[[s]]$BOLD) != V) stop('All sessions must have the same number of data locations, but they do not.')
if(ncol(data[[s]]$design) != K) stop('All sessions must have the same number of tasks (columns of the design matrix), but they do not.')
if(is.null(outfile)){
warning('No value supplied for outfile, which is required for post-hoc group modeling.')
}
if(is.null(mesh)) mesh <- make_mesh(vertices, faces)
#ID any zero-variance voxels and remove from analysis
zero_var <- sapply(data, function(x){
vars <- colVars(x$BOLD)
return(vars < 1e-6)
})
library(matrixStats)
#ID any zero-variance voxels and remove from analysis
zero_var <- sapply(data, function(x){
vars <- colVars(x$BOLD)
return(vars < 1e-6)
})
zero_var <- (rowSums(zero_var) > 0) #check whether any vertices have zero variance in any session
if(sum(zero_var) > 0){
if(is.null(mask)) mask <- !zero_var else mask <- mask*(!zero_var)
}
if(!is.null(mask)) {
mask <- as.logical(mask)
mesh <- submesh.mesh(mask, mesh)
for(s in 1:n_sess){
data[[s]]$BOLD <- data[[s]]$BOLD[,mask]
}
V <- sum(mask)
}
spde <- inla.spde2.matern(mesh)
#collect data and design matrices
y_all <- c()
X_all_list <- NULL
for(s in 1:n_sess){
#extract and mask BOLD data for current session
BOLD_s <- data[[s]]$BOLD
#scale data to represent % signal change (or just center if scale=FALSE)
BOLD_s <- scale_timeseries(t(BOLD_s), scale=scale)
design_s <- scale(data[[s]]$design, scale=FALSE) #center design matrix to eliminate baseline
#regress nuisance parameters from BOLD data and design matrix
if('nuisance' %in% names(data[[s]])){
design_s <- data[[s]]$design
nuisance_s <- data[[s]]$nuisance
y_reg <- nuisance_regress(BOLD_s, nuisance_s)
X_reg <- nuisance_regress(design_s, nuisance_s)
} else {
y_reg <- BOLD_s
X_reg <- data[[s]]$design
}
#set up data and design matrix
data_org <- organize_data(y_reg, X_reg)
y_vec <- data_org$y
X_list <- list(data_org$A)
names(X_list) <- session_names[s]
y_all <- c(y_all, y_vec)
X_all_list <- c(X_all_list, X_list)
}
scale_timeseries <- function(BOLD, scale=TRUE, transpose = TRUE){
BOLD <- as.matrix(BOLD)
nvox <- nrow(BOLD)
ntime <- ncol(BOLD)
#check orientation, send warning message and transpose if necessary
if(ntime > nvox & transpose == TRUE){
warning('More columns than rows. Transposing matrix so rows are data locations and columns are time points')
BOLD <- t(BOLD)
nvox <- nrow(BOLD)
ntime <- ncol(BOLD)
}
local_means <- matrix(rowMeans(BOLD, na.rm=TRUE), nrow=nrow(BOLD), ncol=ncol(BOLD)) #the mean over time for each voxel (the mean image)
if(scale) BOLD <- t(100*(BOLD - local_means)/local_means) #scale to units of pct local signal change AND CENTER
if(!scale) BOLD <- t((BOLD - local_means)) #just center
return(BOLD)
}
help(BayesfMRI::scale_timeseries)
help(scale_timeseries)
for(s in 1:n_sess){
#extract and mask BOLD data for current session
BOLD_s <- data[[s]]$BOLD
#scale data to represent % signal change (or just center if scale=FALSE)
BOLD_s <- scale_timeseries(t(BOLD_s), scale=scale)
design_s <- scale(data[[s]]$design, scale=FALSE) #center design matrix to eliminate baseline
#regress nuisance parameters from BOLD data and design matrix
if('nuisance' %in% names(data[[s]])){
design_s <- data[[s]]$design
nuisance_s <- data[[s]]$nuisance
y_reg <- nuisance_regress(BOLD_s, nuisance_s)
X_reg <- nuisance_regress(design_s, nuisance_s)
} else {
y_reg <- BOLD_s
X_reg <- data[[s]]$design
}
#set up data and design matrix
data_org <- organize_data(y_reg, X_reg)
y_vec <- data_org$y
X_list <- list(data_org$A)
names(X_list) <- session_names[s]
y_all <- c(y_all, y_vec)
X_all_list <- c(X_all_list, X_list)
}
library(BayesfMRI)
for(s in 1:n_sess){
#extract and mask BOLD data for current session
BOLD_s <- data[[s]]$BOLD
#scale data to represent % signal change (or just center if scale=FALSE)
BOLD_s <- scale_timeseries(t(BOLD_s), scale=scale)
design_s <- scale(data[[s]]$design, scale=FALSE) #center design matrix to eliminate baseline
#regress nuisance parameters from BOLD data and design matrix
if('nuisance' %in% names(data[[s]])){
design_s <- data[[s]]$design
nuisance_s <- data[[s]]$nuisance
y_reg <- nuisance_regress(BOLD_s, nuisance_s)
X_reg <- nuisance_regress(design_s, nuisance_s)
} else {
y_reg <- BOLD_s
X_reg <- data[[s]]$design
}
#set up data and design matrix
data_org <- organize_data(y_reg, X_reg)
y_vec <- data_org$y
X_list <- list(data_org$A)
names(X_list) <- session_names[s]
y_all <- c(y_all, y_vec)
X_all_list <- c(X_all_list, X_list)
}
#construct betas and repls objects
replicates_list <- organize_replicates(n_sess=n_sess, n_task=K, mesh=mesh)
library(BayesfMRI)
#construct betas and repls objects
replicates_list <- organize_replicates(n_sess=n_sess, n_task=K, mesh=mesh)
#'
#' @examples \dontrun{}
organize_replicates <- function(n_sess, n_task, mesh){
if(!(class(mesh) %in% c('inla.mesh','BayesfMRI.spde'))) stop('mesh must be of class inla.mesh  (for surface data, see help(make_mesh)) or BayesfMRI.spde (for subcortical data, see help(create_spde_vol3D))')
spatial <- unlist(mesh$idx)
nvox <- length(spatial)
grps <- ((1:(n_sess*n_task) + (n_task-1)) %% n_task) + 1 # 1, 2, .. n_task, 1, 2, .. n_task, ...
repls <- vector('list', n_task)
betas <- vector('list', n_task)
for(i in 1:n_task){
inds_i <- (grps == i)
#set up replicates vectors
sess_NA_i <- rep(NA, n_sess*n_task)
sess_NA_i[inds_i] <- 1:n_sess
repls[[i]] <- rep(sess_NA_i, each=nvox)
names(repls)[i] <- paste0('repl',i)
#set up ith beta vector with replicates for sessions
NAs <- rep(NA, nvox)
preNAs <- rep(NAs, times=(i-1))
postNAs <- rep(NAs, times=(n_task-i))
betas[[i]] <- rep(c(preNAs, spatial, postNAs), n_sess)
names(betas)[i] <- paste0('bbeta',i)
}
result <- list(betas=betas, repls=repls)
return(result)
}
#construct betas and repls objects
replicates_list <- organize_replicates(n_sess=n_sess, n_task=K, mesh=mesh)
betas <- replicates_list$betas
repls <- replicates_list$repls
beta_names <- names(betas)
repl_names <- names(repls)
n_beta <- length(names(betas))
hyper_initial <- c(-2,2)
hyper_initial <- rep(list(hyper_initial), n_beta)
hyper_vec <- paste0(', hyper=list(theta=list(initial=', hyper_initial, '))')
formula_vec <- paste0('f(',beta_names, ', model = spde, replicate = ', repl_names, hyper_vec, ')')
formula_vec <- c('y ~ -1', formula_vec)
formula_str <- paste(formula_vec, collapse=' + ')
formula <- as.formula(formula_str, env = globalenv())
model_data <- make_data_list(y=y_all, X=X_all_list, betas=betas, repls=repls)
#estimate model using INLA
INLA_result <- estimate_model(formula=formula, data=model_data, A=model_data$X, spde=spde, prec_initial=1, num.threads=num.threads)
formula
names(model_data)
head(model_data$y)
head(model_data$X)
head(model_data$bbeta1)
length(model_data$bbeta1)
V
dim(Amat)
model_data$bbeta1
View(cbind(model_data$bbeta1, model_data$bbeta2))
dim(Amat)
1198*2
n_sess
K
dim(replicates_list$repls)
length(replicates_list$repls)
plot(replicates_list$repls[[1]], replicates_list$repls[[2]])
View(cbind(replicates_list$repls[[1]], replicates_list$repls[[2]]))
n_task
n_task=K
n_sess
spatial <- unlist(mesh$idx)
length(spatial)
length(spatial)*2
names(mesh)
mesh$n
mesh$meta
mesh$idx
mesh$idx$loc
length(mesh$idx$loc)
mesh$idx
#'
#' @examples \dontrun{}
organize_replicates <- function(n_sess, n_task, mesh){
if(!(class(mesh) %in% c('inla.mesh','BayesfMRI.spde'))) stop('mesh must be of class inla.mesh  (for surface data, see help(make_mesh)) or BayesfMRI.spde (for subcortical data, see help(create_spde_vol3D))')
spatial <- mesh$idx$loc
nvox <- length(spatial)
grps <- ((1:(n_sess*n_task) + (n_task-1)) %% n_task) + 1 # 1, 2, .. n_task, 1, 2, .. n_task, ...
repls <- vector('list', n_task)
betas <- vector('list', n_task)
for(i in 1:n_task){
inds_i <- (grps == i)
#set up replicates vectors
sess_NA_i <- rep(NA, n_sess*n_task)
sess_NA_i[inds_i] <- 1:n_sess
repls[[i]] <- rep(sess_NA_i, each=nvox)
names(repls)[i] <- paste0('repl',i)
#set up ith beta vector with replicates for sessions
NAs <- rep(NA, nvox)
preNAs <- rep(NAs, times=(i-1))
postNAs <- rep(NAs, times=(n_task-i))
betas[[i]] <- rep(c(preNAs, spatial, postNAs), n_sess)
names(betas)[i] <- paste0('bbeta',i)
}
result <- list(betas=betas, repls=repls)
return(result)
}
#construct betas and repls objects
replicates_list <- organize_replicates(n_sess=n_sess, n_task=K, mesh=mesh)
betas <- replicates_list$betas
repls <- replicates_list$repls
beta_names <- names(betas)
repl_names <- names(repls)
n_beta <- length(names(betas))
hyper_initial <- c(-2,2)
hyper_initial <- rep(list(hyper_initial), n_beta)
hyper_vec <- paste0(', hyper=list(theta=list(initial=', hyper_initial, '))')
formula_vec <- paste0('f(',beta_names, ', model = spde, replicate = ', repl_names, hyper_vec, ')')
formula_vec <- c('y ~ -1', formula_vec)
formula_str <- paste(formula_vec, collapse=' + ')
formula <- as.formula(formula_str, env = globalenv())
model_data <- make_data_list(y=y_all, X=X_all_list, betas=betas, repls=repls)
#estimate model using INLA
INLA_result <- estimate_model(formula=formula, data=model_data, A=model_data$X, spde=spde, prec_initial=1, num.threads=num.threads)
library(roxygen2)
library(roxygen2md)
roxygenize()
roxygenize()
install_github('ciftiTools')
library(devtools)
install_github('ciftiTools')
install_github('mandymejia/ciftiTools')
roxygenize()
library(INLA)
library(roxygen2)
library(roxygen2md)
roxygenize()
