// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// timesTwo
int timesTwo(int x);
RcppExport SEXP _BayesfMRI_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// logDetQ
double logDetQ(double kappa2, Rcpp::List in_list, int n_sess);
RcppExport SEXP _BayesfMRI_logDetQ(SEXP kappa2SEXP, SEXP in_listSEXP, SEXP n_sessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kappa2(kappa2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type in_list(in_listSEXP);
    Rcpp::traits::input_parameter< int >::type n_sess(n_sessSEXP);
    rcpp_result_gen = Rcpp::wrap(logDetQ(kappa2, in_list, n_sess));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesfMRI_timesTwo", (DL_FUNC) &_BayesfMRI_timesTwo, 1},
    {"_BayesfMRI_logDetQ", (DL_FUNC) &_BayesfMRI_logDetQ, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesfMRI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
